# Custom config for Marcel Zuidwijk his DSMR reader. 
# using different names (from official docs) and kW(h) for everything (not Watt)
# added sum sensors to calc low and high tarif into 1 sensor per consumed / returend.

---
substitutions:
  device_name: p1_dsmr_zuidwijk
  device_description: "DIY P1 module to read your smart meter"
 
#external_components:
#  - source: github://zuidwijk/dsmr
     
esphome:
  name: ${device_name}
  comment: "${device_description}"
  platform: ESP8266
  esp8266_restore_from_flash: true
  board: d1_mini
  name_add_mac_suffix: false
  project:
    name: zuidwijk.slimmelezer
    version: "1.0"
  on_boot:
    then:
      - if:
          condition:
            lambda: return id(has_key);
          then:
            - lambda: |-
                std::string key(id(stored_decryption_key), 32);
                id(dsmr_instance).set_decryption_key(key);
          else:
            - logger.log:
                level: info
                format: "Not using decryption key. If you need to set a key use Home Assistant service 'ESPHome:  ${device_name}_set_dsmr_key'"
 
wifi:
  ssid: !secret wifi_ssid_iot
  password: !secret wifi_password_iot
  fast_connect: true
 
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_name}
    ap_timeout: 15s
 
captive_portal:
 
# Enable logging
logger:
 
# Enable Home Assistant API
api:
  password: !secret esphome_local
  services:
    service: set_dsmr_key
    variables:
      private_key: string
    then:
      - logger.log:
          format: Setting private key %s. Set to empty string to disable
          args: [private_key.c_str()]
      - globals.set:
          id: has_key
          value: !lambda "return private_key.length() == 32;"
      - lambda: |-
          if (private_key.length() == 32)
            private_key.copy(id(stored_decryption_key), 32);
          id(dsmr_instance).set_decryption_key(private_key);
 
ota:
  password: !secret esphome_local

web_server:
  port: 80
 
uart:
  baud_rate: 115200
  rx_pin: D7
 
globals:
  - id: has_key
    type: bool
    restore_value: yes
    initial_value: "false"
  - id: stored_decryption_key
    type: char[32]
    restore_value: yes
 
dsmr:
  id: dsmr_instance
 
sensor:
  - platform: dsmr
    energy_delivered_tariff1:
      name: "Consumption Low Tarif"
      id: "energy_delivered_t1"
      state_class: total_increasing
      unit_of_measurement: kWh
      accuracy_decimals: 3
      icon: "mdi:flash"
    energy_delivered_tariff2:
      name: "Consumption High Tarif"
      id: "energy_delivered_t2"
      state_class: total_increasing
      unit_of_measurement: kWh
      accuracy_decimals: 3
      icon: "mdi:flash"
    energy_returned_tariff1:
      name: "Return Low Tarif"
      id: "energy_returned_t1"
      state_class: total_increasing
      unit_of_measurement: kWh
      accuracy_decimals: 3
      icon: "mdi:flash-outline"
    energy_returned_tariff2:
      name: "Return High Tarif"
      id: "energy_returned_t2"
      state_class: total_increasing
      unit_of_measurement: kWh
      accuracy_decimals: 3
      icon: "mdi:flash-outline"
    power_delivered:
      name: "Power Consumption"
      unit_of_measurement: kW
      accuracy_decimals: 3
      icon: "mdi:flash"
    power_returned:
      name: "Power Production"
      unit_of_measurement: kW
      accuracy_decimals: 3
      icon: "mdi:flash-outline"
    electricity_failures:
      name: "Power failures in any phase"
      icon: mdi:alert
    electricity_long_failures:
      name: "Long power failures in any phase"
      icon: mdi:alert
    voltage_l1:
      name: "Instant Voltage L1"
      unit_of_measurement: V
      accuracy_decimals: 1
      icon: "mdi:flash"
    voltage_l2:
      name: "Instant Voltage L2"
      unit_of_measurement: V
      accuracy_decimals: 1
      icon: "mdi:flash"
    voltage_l3:
      name: "Instant Voltage L3"
      unit_of_measurement: V
      accuracy_decimals: 1
      icon: "mdi:flash"
    current_l1:
      name: "Instant Current L1"
      unit_of_measurement: A
      accuracy_decimals: 0 #this is at Amp resolution according to specs. So no milli A. 
      icon: "mdi:current-ac"
    current_l2:
      name: "Instant Current L2"
      unit_of_measurement: A
      accuracy_decimals: 0 #this is at Amp resolution according to specs. So no milli A. 
      icon: "mdi:current-ac"
    current_l3:
      name: "Instant Current L3"
      unit_of_measurement: A
      accuracy_decimals: 0 #this is at Amp resolution according to specs. So no milli A. 
      icon: "mdi:current-ac"
    power_delivered_l1:
      name: "Power Consumption Phase L1"
      unit_of_measurement: kW
      accuracy_decimals: 3
    power_delivered_l2:
      name: "Power Consumption Phase L2"
      unit_of_measurement: kW
      accuracy_decimals: 3
    power_delivered_l3:
      name: "Power Consumption Phase L3"
      unit_of_measurement: kW
      accuracy_decimals: 3
    power_returned_l1:
      name: "Power Production Phase L1"
      unit_of_measurement: kW
      accuracy_decimals: 3
    power_returned_l2:
      name: "Power Production Phase L2"
      unit_of_measurement: kW
      accuracy_decimals: 3
    power_returned_l3:
      name: "Power Production Phase L3"
      unit_of_measurement: kW
      accuracy_decimals: 3
    gas_delivered:
      name: "Gas Consumption"
      state_class: total_increasing
      unit_of_measurement: mÂ³
      accuracy_decimals: 3
      icon: "mdi:fire"
  - platform: uptime
    name: "Uptime"
  - platform: wifi_signal
    name: "Wi-Fi Signal"
    update_interval: 60s
  - platform: template
    id: energy_delivered_total
    name: "Consumption Total"
    state_class: total_increasing
    unit_of_measurement: "kWh"
    lambda: |-
      return ( id(energy_delivered_t1).state  + id(energy_delivered_t2).state );  
    accuracy_decimals: 3
    update_interval: 10s
    icon: "mdi:flash"
  - platform: template
    id: energy_returned_total
    name: "Return Total"
    state_class: total_increasing
    unit_of_measurement: "kWh"
    lambda: |-
      return ( id(energy_returned_t1).state  + id(energy_returned_t2).state );  
    accuracy_decimals: 3
    update_interval: 10s
    icon: "mdi:flash-outline"
    
text_sensor:
  - platform: dsmr
    identification:
      name: "DSMR Identification"
    p1_version:
      name: "DSMR Version"
    p1_version_be:
      name: "DSMR Version Belgium"
  - platform: wifi_info
    ip_address:
      name: "IP Address"
    ssid:
      name: "Wi-Fi SSID"
    bssid:
      name: "Wi-Fi BSSID"
  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true
